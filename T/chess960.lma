
func assign(line, col, rkr, bb: Int, bw: Int, pieces)
|(_, _, _, _, _, []) -> line
|(line, col, #rook, bb, bw, [#rkr;pieces]) ->
    assign([#rook;line], col+1, #king, bb, bw, pieces)
|(line, col, #king, bb, bw, [#rkr;pieces]) ->
    assign([#king;line], col+1, #rook, bb, bw, pieces)
|(line, col, rkr, bb, bw, [p;pieces]) ->
    if
    |col == bb -> assign([#bishop;line], col+1, rkr, 0, bw, pieces)
    |col == bw -> assign([#bishop;line], col+1, rkr, bb, 0, pieces)
    |else -> assign([p;line], col+1, rkr, bb, bw, pieces)
    --
--

func print_pieces(all_pieces)
|([]) -> ## noop
|([#rook;pieces]) ->
    cout("R")
    print_pieces(pieces)
|([#knight;pieces]) ->
    cout("N")
    print_pieces(pieces)
|([#bishop;pieces]) ->
    cout("B")
    print_pieces(pieces)
|([#queen;pieces]) ->
    cout("Q")
    print_pieces(pieces)
|([#king;pieces]) ->
    cout("K")
    print_pieces(pieces)
|([what;pieces]) ->
    cout("no match? $what\n")
    print_pieces(pieces)
--

func chess960(): [#] ->
    let bb := 2 * (int_random() mod 4) + 1
    let bw := 2 * (int_random() mod 4) + 2
    let pieces := [
        (int_random(), #knight),
        (int_random(), #knight),
        (int_random(), #queen),
        (int_random(), #rkr),
        (int_random(), #rkr),
        (int_random(), #rkr)
        ]
    ## let sorted_pieces := sort(pieces)
    assign([], 1, #rook, bb, bw, pieces)
--

func main() ->
    let backline := chess960()
    print_pieces(backline)
    0
--
