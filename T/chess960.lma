
func assign(line: [#], col: Int, rkr: #, bb: Int, bw: Int, pcs: [#]): [#]
|(line, _, _, 0, 0, []) -> line
|(line, col, rkr, bb, bw, pcs) ->
    if
    |col == bb ->
        assign(#bishop;line, col+1, rkr, 0, bw, pcs)
    |col == bw ->
        assign(#bishop;line, col+1, rkr, bb, 0, pcs)
    |else ->
        match (rkr, pcs)
        |(#rook, #rkr;apieces) ->
            assign(#rook;line, col+1, #king, bb, bw, apieces)
        |(#king, #rkr;apieces) ->
            assign(#king;line, col+1, #rook, bb, bw, apieces)
        |(_, p;apieces) ->
            assign(p;line, col+1, rkr, bb, bw, apieces)
        --
    --
--

func print_pieces(all_ppcs: [#])
|[] ->
    print("\n")
|#rook;ppcs ->
    print("R")
    print_pieces(ppcs)
|#knight;ppcs ->
    print("N")
    print_pieces(ppcs)
|#bishop;ppcs ->
    print("B")
    print_pieces(ppcs)
|#queen;ppcs ->
    print("Q")
    print_pieces(ppcs)
|#king;ppcs ->
    print("K")
    print_pieces(ppcs)
|all_ppcs ->
    print("no match? $all_ppcs\n")
--

func take_pieces(outs: [#], input: [(Int, #)]): [#]
|(outs, []) -> outs
|(outs, (_, head);tail) -> take_pieces(head;outs, tail)
--

func chess960(): [#] ->
    let bb := 2 * (int_abs(int_random()) mod 4) + 1
    let bw := 2 * (int_abs(int_random()) mod 4) + 2
    let pieces := [
        (int_random(), #knight),
        (int_random(), #knight),
        (int_random(), #queen),
        (int_random(), #rkr),
        (int_random(), #rkr),
        (int_random(), #rkr)
        ]
    ## let sorted_pieces := sort(pieces)
    let just_pieces := take_pieces([], pieces)
    assign([], 1, #rook, bb, bw, just_pieces)
--

func main() ->
    let backline := chess960()
    print_pieces(backline)
    0
--
