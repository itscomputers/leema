
interface Additive
{
    func add(a: Additive, b: Additive): Int
}

interface Additive<T>
{
    func add(a: T, b: T): Int
}

bind Additive<Int>
{
    func add(a: Int, b: Int): Int {
        int_add(a, b)
    }
}

interface Eq
{
    func equal(a: Eq, b: Eq): bool
    func not_equal(a: Eq, b: Eq): bool {
        not Eq::equal(a, b)
    }
}

bind Eq<Int>
bind Int <: Eq
{
    func equal(a: Int, b: Int): bool {
        int_equal(a, b)
    }
}

protocol PatternMatch<P, I, O>
{
    func patt_match(p: P, i: I): O
}

bind PatternMatch<Regex, String, RegexMatch>
{
    func patt_match(p: Regex, i: String): RegexMatch {
        ...
    }
}

bind PatternMatch<String, String, RegexMatch>
{
    func patt_match(p: P, i: I): O {
        ...
    }
}
